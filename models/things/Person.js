var mongoose = require('mongoose');
var Schema = mongoose.Schema;
var schema = new Schema({ additionalName: { type: Schema.Types.ObjectId, ref: 'additionalName' },
  address: { type: Schema.Types.ObjectId, ref: 'address' },
  affiliation: { type: Schema.Types.ObjectId, ref: 'affiliation' },
  alumniOf: { type: Schema.Types.ObjectId, ref: 'alumniOf' },
  award: { type: Schema.Types.ObjectId, ref: 'award' },
  birthDate: { type: Schema.Types.ObjectId, ref: 'birthDate' },
  brand: { type: Schema.Types.ObjectId, ref: 'brand' },
  children: { type: Schema.Types.ObjectId, ref: 'children' },
  colleague: { type: Schema.Types.ObjectId, ref: 'colleague' },
  contactPoint: { type: Schema.Types.ObjectId, ref: 'contactPoint' },
  deathDate: { type: Schema.Types.ObjectId, ref: 'deathDate' },
  duns: { type: Schema.Types.ObjectId, ref: 'duns' },
  email: { type: Schema.Types.ObjectId, ref: 'email' },
  familyName: { type: Schema.Types.ObjectId, ref: 'familyName' },
  faxNumber: { type: Schema.Types.ObjectId, ref: 'faxNumber' },
  follows: { type: Schema.Types.ObjectId, ref: 'follows' },
  gender: { type: Schema.Types.ObjectId, ref: 'gender' },
  givenName: { type: Schema.Types.ObjectId, ref: 'givenName' },
  globalLocationNumber: { type: Schema.Types.ObjectId, ref: 'globalLocationNumber' },
  hasPOS: { type: Schema.Types.ObjectId, ref: 'hasPOS' },
  homeLocation: { type: Schema.Types.ObjectId, ref: 'homeLocation' },
  honorificPrefix: { type: Schema.Types.ObjectId, ref: 'honorificPrefix' },
  honorificSuffix: { type: Schema.Types.ObjectId, ref: 'honorificSuffix' },
  interactionCount: { type: Schema.Types.ObjectId, ref: 'interactionCount' },
  isicV4: { type: Schema.Types.ObjectId, ref: 'isicV4' },
  jobTitle: { type: Schema.Types.ObjectId, ref: 'jobTitle' },
  knows: { type: Schema.Types.ObjectId, ref: 'knows' },
  makesOffer: { type: Schema.Types.ObjectId, ref: 'makesOffer' },
  memberOf: { type: Schema.Types.ObjectId, ref: 'memberOf' },
  naics: { type: Schema.Types.ObjectId, ref: 'naics' },
  nationality: { type: Schema.Types.ObjectId, ref: 'nationality' },
  owns: { type: Schema.Types.ObjectId, ref: 'owns' },
  parent: { type: Schema.Types.ObjectId, ref: 'parent' },
  performerIn: { type: Schema.Types.ObjectId, ref: 'performerIn' },
  relatedTo: { type: Schema.Types.ObjectId, ref: 'relatedTo' },
  seeks: { type: Schema.Types.ObjectId, ref: 'seeks' },
  sibling: { type: Schema.Types.ObjectId, ref: 'sibling' },
  spouse: { type: Schema.Types.ObjectId, ref: 'spouse' },
  taxID: { type: Schema.Types.ObjectId, ref: 'taxID' },
  telephone: { type: Schema.Types.ObjectId, ref: 'telephone' },
  vatID: { type: Schema.Types.ObjectId, ref: 'vatID' },
  workLocation: { type: Schema.Types.ObjectId, ref: 'workLocation' },
  worksFor: { type: Schema.Types.ObjectId, ref: 'worksFor' },
  additionalType: { type: Schema.Types.ObjectId, ref: 'additionalType' },
  alternateName: { type: Schema.Types.ObjectId, ref: 'alternateName' },
  description: { type: Schema.Types.ObjectId, ref: 'description' },
  image: { type: Schema.Types.ObjectId, ref: 'image' },
  name: { type: Schema.Types.ObjectId, ref: 'name' },
  sameAs: { type: Schema.Types.ObjectId, ref: 'sameAs' },
  url: { type: Schema.Types.ObjectId, ref: 'url' },
  potentialAction: { type: Schema.Types.ObjectId, ref: 'potentialAction' } });
module.exports = mongoose.model('Person', schema);